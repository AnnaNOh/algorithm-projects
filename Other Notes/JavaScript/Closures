Closure - the combination of a function and the lexical environment from which it was declared. Closures allow a function to access variables from an enclosing scope - environment - even after it leaves the scope in which it was declared.

Example:
function sayHi(name){
  var message = `Hi ${name}!`;
  function greeting() {
    console.log(message)
  }
  return greeting
}
var sayHiToJon = sayHi('Jon');
console.log(sayHiToJon)     // Æ’() { console.log(message) }
console.log(sayHiToJon())   // 'Hi Jon!'

2 Things You Need to Know About Closures:
1. Refers to variables in outer scope
The returned function accesses the message variable from the enclosing scope.

2. It can refer to outer scope variables even after the outer function has returned.
sayHitToJon is a reference to the greeting function, created when sayHi was run.
The greeting function maintains a reference to its outer scope - environment - in which message exists.

Closures allow for data encapsulation.
Some data should be directly exposed.

Common interview problem for closures:
const arr = [10, 12, 15, 21];
for (var i = 0; i < arr.length; i++) {
  setTimeout(function() {
    console.log(`The value ${arr[i]} is at index: ${i}`);
  }, (i+1) * 1000);
}

Fix it by:
const arr = [10, 12, 15, 21];
for (var i = 0; i < arr.length; i++) {
  (function(j) {
    setTimeout(function() {
      console.log(`The value ${arr[j]} is at index: ${j}`);
    }, j * 1000);
  })(i)
}

OR you can:
const arr = [10, 12, 15, 21];
for (let i = 0; i < arr.length; i++) {
  setTimeout(function() {
    console.log(`The value ${arr[i]} is at index: ${i}`);
  }, (i) * 1000);
}
